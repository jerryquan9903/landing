# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  image: ImageFieldOutput
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  image: ImageFieldInput
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  image: ImageFieldInput
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Sheet {
  id: ID!
  title: String
  publishDate: DateTime
  difficulty: Difficulty
  media: Source
  artist(
    where: ArtistWhereInput! = {}
    orderBy: [ArtistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artist!]
  artistCount(where: ArtistWhereInput! = {}): Int
  notes: String
  link: FileFieldOutput
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input SheetWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input SheetWhereInput {
  AND: [SheetWhereInput!]
  OR: [SheetWhereInput!]
  NOT: [SheetWhereInput!]
  id: IDFilter
  title: StringFilter
  publishDate: DateTimeFilter
  difficulty: DifficultyWhereInput
  media: SourceWhereInput
  artist: ArtistManyRelationFilter
  notes: StringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ArtistManyRelationFilter {
  every: ArtistWhereInput
  some: ArtistWhereInput
  none: ArtistWhereInput
}

input SheetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publishDate: OrderDirection
  notes: OrderDirection
}

input SheetUpdateInput {
  title: String
  publishDate: DateTime
  difficulty: DifficultyRelateToOneForUpdateInput
  media: SourceRelateToOneForUpdateInput
  artist: ArtistRelateToManyForUpdateInput
  notes: String
  link: FileFieldInput
}

input DifficultyRelateToOneForUpdateInput {
  create: DifficultyCreateInput
  connect: DifficultyWhereUniqueInput
  disconnect: Boolean
}

input SourceRelateToOneForUpdateInput {
  create: SourceCreateInput
  connect: SourceWhereUniqueInput
  disconnect: Boolean
}

input ArtistRelateToManyForUpdateInput {
  disconnect: [ArtistWhereUniqueInput!]
  set: [ArtistWhereUniqueInput!]
  create: [ArtistCreateInput!]
  connect: [ArtistWhereUniqueInput!]
}

input FileFieldInput {
  upload: Upload
  ref: String
}

input SheetUpdateArgs {
  where: SheetWhereUniqueInput!
  data: SheetUpdateInput!
}

input SheetCreateInput {
  title: String
  publishDate: DateTime
  difficulty: DifficultyRelateToOneForCreateInput
  media: SourceRelateToOneForCreateInput
  artist: ArtistRelateToManyForCreateInput
  notes: String
  link: FileFieldInput
}

input DifficultyRelateToOneForCreateInput {
  create: DifficultyCreateInput
  connect: DifficultyWhereUniqueInput
}

input SourceRelateToOneForCreateInput {
  create: SourceCreateInput
  connect: SourceWhereUniqueInput
}

input ArtistRelateToManyForCreateInput {
  create: [ArtistCreateInput!]
  connect: [ArtistWhereUniqueInput!]
}

type Difficulty {
  id: ID!
  name: Int
  rel(
    where: SheetWhereInput! = {}
    orderBy: [SheetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Sheet!]
  relCount(where: SheetWhereInput! = {}): Int
}

input DifficultyWhereUniqueInput {
  id: ID
}

input DifficultyWhereInput {
  AND: [DifficultyWhereInput!]
  OR: [DifficultyWhereInput!]
  NOT: [DifficultyWhereInput!]
  id: IDFilter
  name: IntNullableFilter
  rel: SheetManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SheetManyRelationFilter {
  every: SheetWhereInput
  some: SheetWhereInput
  none: SheetWhereInput
}

input DifficultyOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input DifficultyUpdateInput {
  name: Int
  rel: SheetRelateToManyForUpdateInput
}

input SheetRelateToManyForUpdateInput {
  disconnect: [SheetWhereUniqueInput!]
  set: [SheetWhereUniqueInput!]
  create: [SheetCreateInput!]
  connect: [SheetWhereUniqueInput!]
}

input DifficultyUpdateArgs {
  where: DifficultyWhereUniqueInput!
  data: DifficultyUpdateInput!
}

input DifficultyCreateInput {
  name: Int
  rel: SheetRelateToManyForCreateInput
}

input SheetRelateToManyForCreateInput {
  create: [SheetCreateInput!]
  connect: [SheetWhereUniqueInput!]
}

type Artist {
  id: ID!
  name: String
  rel(
    where: SheetWhereInput! = {}
    orderBy: [SheetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Sheet!]
  relCount(where: SheetWhereInput! = {}): Int
}

input ArtistWhereUniqueInput {
  id: ID
}

input ArtistWhereInput {
  AND: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  id: IDFilter
  name: StringFilter
  rel: SheetManyRelationFilter
}

input ArtistOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ArtistUpdateInput {
  name: String
  rel: SheetRelateToManyForUpdateInput
}

input ArtistUpdateArgs {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateInput!
}

input ArtistCreateInput {
  name: String
  rel: SheetRelateToManyForCreateInput
}

type Source {
  id: ID!
  name: String
  image: ImageFieldOutput
  rel(
    where: SheetWhereInput! = {}
    orderBy: [SheetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Sheet!]
  relCount(where: SheetWhereInput! = {}): Int
}

input SourceWhereUniqueInput {
  id: ID
}

input SourceWhereInput {
  AND: [SourceWhereInput!]
  OR: [SourceWhereInput!]
  NOT: [SourceWhereInput!]
  id: IDFilter
  name: StringFilter
  rel: SheetManyRelationFilter
}

input SourceOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SourceUpdateInput {
  name: String
  image: ImageFieldInput
  rel: SheetRelateToManyForUpdateInput
}

input SourceUpdateArgs {
  where: SourceWhereUniqueInput!
  data: SourceUpdateInput!
}

input SourceCreateInput {
  name: String
  image: ImageFieldInput
  rel: SheetRelateToManyForCreateInput
}

type Workplace {
  id: ID!
  name: String
  role: String
  startDate: DateTime
  endDate: DateTime
  desc: Workplace_desc_Document
}

type Workplace_desc_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input WorkplaceWhereUniqueInput {
  id: ID
}

input WorkplaceWhereInput {
  AND: [WorkplaceWhereInput!]
  OR: [WorkplaceWhereInput!]
  NOT: [WorkplaceWhereInput!]
  id: IDFilter
  name: StringFilter
  role: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
}

input WorkplaceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  role: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input WorkplaceUpdateInput {
  name: String
  role: String
  startDate: DateTime
  endDate: DateTime
  desc: JSON
}

input WorkplaceUpdateArgs {
  where: WorkplaceWhereUniqueInput!
  data: WorkplaceUpdateInput!
}

input WorkplaceCreateInput {
  name: String
  role: String
  startDate: DateTime
  endDate: DateTime
  desc: JSON
}

type Image {
  id: ID!
  name: String
  image: ImageFieldOutput
  publishDate: DateTime
}

input ImageWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  publishDate: DateTimeNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  publishDate: OrderDirection
}

input ImageUpdateInput {
  name: String
  image: ImageFieldInput
  publishDate: DateTime
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  image: ImageFieldInput
  publishDate: DateTime
}

type Project {
  id: ID!
  name: String
  link: String
  images: Project_images_Document
  role: String
  responsibility: Project_responsibility_Document
  technology: Project_technology_Document
  description: Project_description_Document
}

type Project_images_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Project_responsibility_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Project_technology_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Project_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  link: StringFilter
  role: StringFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  link: OrderDirection
  role: OrderDirection
}

input ProjectUpdateInput {
  name: String
  link: String
  images: JSON
  role: String
  responsibility: JSON
  technology: JSON
  description: JSON
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  link: String
  images: JSON
  role: String
  responsibility: JSON
  technology: JSON
  description: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createSheet(data: SheetCreateInput!): Sheet
  createSheets(data: [SheetCreateInput!]!): [Sheet]
  updateSheet(where: SheetWhereUniqueInput!, data: SheetUpdateInput!): Sheet
  updateSheets(data: [SheetUpdateArgs!]!): [Sheet]
  deleteSheet(where: SheetWhereUniqueInput!): Sheet
  deleteSheets(where: [SheetWhereUniqueInput!]!): [Sheet]
  createDifficulty(data: DifficultyCreateInput!): Difficulty
  createDifficulties(data: [DifficultyCreateInput!]!): [Difficulty]
  updateDifficulty(
    where: DifficultyWhereUniqueInput!
    data: DifficultyUpdateInput!
  ): Difficulty
  updateDifficulties(data: [DifficultyUpdateArgs!]!): [Difficulty]
  deleteDifficulty(where: DifficultyWhereUniqueInput!): Difficulty
  deleteDifficulties(where: [DifficultyWhereUniqueInput!]!): [Difficulty]
  createArtist(data: ArtistCreateInput!): Artist
  createArtists(data: [ArtistCreateInput!]!): [Artist]
  updateArtist(where: ArtistWhereUniqueInput!, data: ArtistUpdateInput!): Artist
  updateArtists(data: [ArtistUpdateArgs!]!): [Artist]
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteArtists(where: [ArtistWhereUniqueInput!]!): [Artist]
  createSource(data: SourceCreateInput!): Source
  createSources(data: [SourceCreateInput!]!): [Source]
  updateSource(where: SourceWhereUniqueInput!, data: SourceUpdateInput!): Source
  updateSources(data: [SourceUpdateArgs!]!): [Source]
  deleteSource(where: SourceWhereUniqueInput!): Source
  deleteSources(where: [SourceWhereUniqueInput!]!): [Source]
  createWorkplace(data: WorkplaceCreateInput!): Workplace
  createWorkplaces(data: [WorkplaceCreateInput!]!): [Workplace]
  updateWorkplace(
    where: WorkplaceWhereUniqueInput!
    data: WorkplaceUpdateInput!
  ): Workplace
  updateWorkplaces(data: [WorkplaceUpdateArgs!]!): [Workplace]
  deleteWorkplace(where: WorkplaceWhereUniqueInput!): Workplace
  deleteWorkplaces(where: [WorkplaceWhereUniqueInput!]!): [Workplace]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  sheets(
    where: SheetWhereInput! = {}
    orderBy: [SheetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Sheet!]
  sheet(where: SheetWhereUniqueInput!): Sheet
  sheetsCount(where: SheetWhereInput! = {}): Int
  difficulties(
    where: DifficultyWhereInput! = {}
    orderBy: [DifficultyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Difficulty!]
  difficulty(where: DifficultyWhereUniqueInput!): Difficulty
  difficultiesCount(where: DifficultyWhereInput! = {}): Int
  artists(
    where: ArtistWhereInput! = {}
    orderBy: [ArtistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artist!]
  artist(where: ArtistWhereUniqueInput!): Artist
  artistsCount(where: ArtistWhereInput! = {}): Int
  sources(
    where: SourceWhereInput! = {}
    orderBy: [SourceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Source!]
  source(where: SourceWhereUniqueInput!): Source
  sourcesCount(where: SourceWhereInput! = {}): Int
  workplaces(
    where: WorkplaceWhereInput! = {}
    orderBy: [WorkplaceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Workplace!]
  workplace(where: WorkplaceWhereUniqueInput!): Workplace
  workplacesCount(where: WorkplaceWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
